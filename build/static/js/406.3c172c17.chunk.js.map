{"version":3,"file":"static/js/406.3c172c17.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/form/Form.js","components/pages/MainPage.js","hooks/http.hook.js","keys/apiKey.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    // const [loading, setLoading] = useState(true);\n    // const [error, setError] = useState(false);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService(); \n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000); // каждые 60 сек подгружаем нового рандомыча\n\n        return () => { // аналог componentWillUnmount\n            clearInterval(timerId)\n        } \n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        //setLoading(false);\n    }\n\n    const updateChar = () => { // используем для метода стрелочную функцию, чтобы не терять контекст класса\n        clearError(); // если в прошлом запросе появилась ошибка и не очистить -> следующий запрос не сработает\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        //onCharLoading();\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed')); // завершение загрузки инфо с api\n            //.catch(onError); // если ошибка при загрузке инфо\n    }\n\n    // const errorMessage = error ?  <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error) ? <View char={char}/> : null;// контент помещается тогда, когда нет загрузки и нет ошибки\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    // console.log(thumbnail, name, description, homepage, wiki);\n    // console.log(char);\n\n    // два раза параша загружается, хотя нет strictMode\n    let isStubImg = true;//thumbnail.indexOf('image_not_available.jpg') > 0;\n    if (thumbnail) {\n        isStubImg = thumbnail.indexOf('image_not_available.jpg') > 0;\n        //console.log(isStubImg);\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={isStubImg ? {objectFit: \"contain\"} : {objectFit: \"cover\"}}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => { // передаем процесс нужный и данные по персонажу(если нужно)\n    // отталкиваемся от процесса и в зависимости от него генерируем разные кусочки интерфейса\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <Component/>; \n            break;\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charArr, setCharArr] = useState([]);\n    // const [loading, setLoading] = useState(true);\n    // const [error, setError] = useState(false);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => { // эмулируем componentDidMount. Запускается уже после рендера\n        // Т.к. useEffect используется уже после рендера то мы можем использовать onRequest выше чем эта функция объявлена\n        onRequest(offset, true); // весь код выше заменили - только не передали offset, так как он не нужен\n    }, []);\n\n    const onRequest = (offset, initial) => { // метод, который вызывается при нажатии на кнопку дозагрузки персонажей\n        //onCharListLoading();\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        //setnewItemLoading(true);\n        //marvelService\n        getAllCharacters(offset)\n            .then(onCharsLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharsLoaded = (newCharArr) => { \n\n        let ended = false; // проверяем, не закончились ли персонажи для дозагрузки\n        if (newCharArr.length < 9) {\n            ended = true;\n        }\n\n        setCharArr(charArr =>[...charArr, ...newCharArr]); // старых, уже загруженных персонажей оставляем - новых добавляем\n        //setLoading(false);\n        setnewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n\n    }\n\n    // работа со ссылками\n    const refsArray = useRef([]);\n\n    //console.log('charList');\n\n    const onCharSelect = (itemID, i) => {\n        props.onCharSelected(itemID);\n\n        refsArray.current.forEach(item => {\n            item.classList.remove('char__item_selected');\n        });\n\n        refsArray.current[i].classList.add('char__item_selected');\n        refsArray.current[i].focus(); \n        \n    }\n\n    const renderElements = () => {\n        console.log('render');\n        const items = charArr.map((item, i) => {\n            const {id, ...ItemProps} = item;\n            const isStubImg = ItemProps.thumbnail.indexOf('image_not_available.jpg') > 0;\n\n            return(\n                <CSSTransition key={id} timeout={500} classNames={\"char__item\"}>\n                    <li \n                    ref={el => refsArray.current[i] = el} \n                    className=\"char__item\" \n                    key={id} \n                    tabIndex={10} \n                    onClick={() => onCharSelect(item.id, i)}\n                    onKeyDown={(e) => { \n                        if (e.key === ' ' || e.key === 'Enter') {\n                            e.preventDefault(); \n                            onCharSelect(item.id, i);\n                        }\n                    }}>\n                        <img src={ItemProps.thumbnail} alt={ItemProps.name} style={isStubImg ? {objectFit: \"unset\"} : {objectFit: \"cover\"}}/>\n                        <div className=\"char__name\">{ItemProps.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n            <TransitionGroup component={null}>\n                {items}\n            </TransitionGroup>\n        </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderElements(), newItemLoading); // usememo запоминает результат работы этой функции\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}> \n                {/* у onClick стрелочная функция, потому что тут нужно передать аргумент */}\n                {/*style прописали, если закончились данные для отображения - то кнопку убираем*/}\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService(); // будет запускаться хук, который будет генерировать процесс, который идет в этом конкретном компоненте\n\n    const onCharLoaded = (char) => {\n        // как только загружаются данные - спинер убираем\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) { // изначально, когда никто не выбран в charid null\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed')); // чтобы избавиться от бага из-за асинхронности в setContent\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    // const skeleton = char || loading || error ? null : <Skeleton/>; \n    // const errorMessage = error ?  <ErrorMessage/> : null; \n    // const spinner = loading ? <Spinner/> : null; \n    // const content = !(loading || error || !char) ? <View char={char}/> : null; \n\n    return (\n        <div className=\"char__info\">\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let comicsItems;\n    if (comics.length === 0) {\n        comicsItems = 'No comics yet';\n    } else {\n        comicsItems = comics.slice(0, 10).map((item, i) => {\n            //http://gateway.marvel.com/v1/public/comics/56021\n            //console.log(item.resourceURI.slice(43));\n            const comicId = `/comics/${item.resourceURI.slice(43)}`;\n                        //if (i > 9) return; // но все равно проходит по всем элементам\n                        return (\n                            <li className=\"char__comics-item\" key={comicId}>\n                                <Link to={comicId}>{item.name}</Link>\n                            </li>\n                        )\n                    });\n    }\n\n    const isStubImg = thumbnail.indexOf('image_not_available.jpg') > 0;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={isStubImg ? {objectFit: \"unset\"} : {objectFit: \"cover\"}}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsItems}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = { // charId - пропс, который приходит в этот компонент\n    charId: PropTypes.number // пропс charId обязательно должен быть числом(number). Если все кул - консоль пустая. Если нет (поменяем на string) - предупреждение в консоли\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) { // error - объект ошибки\r\n    //     // занимается только тем, что обновляет состояние\r\n    //     return {error: true}; // по факту это аналог setState который работает только с ошибкой\r\n        \r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","// import { useState } from \"react\";\r\n// import {useFormik} from \"formik\";\r\n// import {Link} from 'react-router-dom';\r\n// import useMarvelService from \"../../services/MarvelService\";\r\n\r\n// import \"./form.scss\";\r\n\r\n// const SearchForm = () => {\r\n//     const [style, setStyle] = useState('none');\r\n//     const [error, setError] = useState(false);\r\n//     const [notFound, setNotFound] = useState(false);\r\n//     const [charId, setCharId] = useState(null);\r\n\r\n//     const {getCharacterByName} = useMarvelService();\r\n\r\n//     const validate = (values) => {\r\n//         const errors = {};\r\n//         if (!values.charName) {\r\n//             errors.charName = 'This field is required';\r\n//             setError(true);\r\n//             setNotFound(false);\r\n//         } \r\n    \r\n//         return errors;\r\n//     }\r\n\r\n//     const onCharSelected = (char) => {\r\n//         //console.log(char);\r\n//         //console.log(char.id); \r\n//         setCharId(char.id);\r\n//     }\r\n\r\n//     const onSubmit = (values) => {\r\n//         //console.log(values.charName);\r\n//         getCharacterByName(values.charName)\r\n//             .then(onCharSelected)\r\n//             .then(() => {\r\n//                 setStyle(\"flex\");\r\n//                 setNotFound(false);\r\n//                 setError(false); \r\n//             })\r\n//             .catch(() => {\r\n//                 setNotFound(true);\r\n//                 setError(false);\r\n//                 setStyle(\"none\");\r\n//             });\r\n//         //console.log(JSON.stringify(values, null, 2));\r\n//     }\r\n\r\n//     const formik = useFormik({\r\n//         onSubmit,\r\n//         validate,\r\n//         initialValues: {\r\n//             charName: ''\r\n//         }\r\n//     });\r\n\r\n//     return (\r\n//         <form className=\"search-form\" onSubmit={formik.handleSubmit}>\r\n//             <div className=\"search-form__text\"> Or find a character by name:</div>\r\n//             <input\r\n//                 id=\"charName\"\r\n//                 name=\"charName\"\r\n//                 className=\"search-form__input\"\r\n//                 value={formik.values.charName}\r\n//                 onBlur={formik.handleBlur}\r\n//                 onChange={e => {\r\n//                     formik.handleChange(e);\r\n//                     setError(false);\r\n//                     setStyle(\"none\");\r\n//                     setNotFound(false);\r\n//                 }}\r\n//                 type=\"text\"/>\r\n//             <button type=\"submit\" href=\"#\" className=\"button button__main search-form__btn-search\">\r\n//                 <div className=\"inner\">Find</div>\r\n//             </button>\r\n//             {formik.errors.charName && formik.touched.charName ?\r\n//                 <div className=\"search-form__error\">\r\n//                     {formik.errors.charName}\r\n//                 </div> : null\r\n//             }    \r\n//             <div style={{display: `${style}`}} className=\"search-form__success\">\r\n//                 <div href=\"#\" className=\"search-form__success-text\">\r\n//                     There is {formik.values.charName.toUpperCase()}! Visit page?\r\n//                 </div>\r\n\r\n//                 <Link to={`/characters/${charId}`} className=\"button button__secondary search-form__success-btn\">\r\n//                     <div className=\"inner\">to page</div>\r\n//                 </Link>\r\n//             </div>        \r\n//             {notFound ? <div className=\"search-form__error\">The character was not found. Check the name and try again</div> : null}\r\n//         </form>\r\n//     )\r\n// }\r\n\r\n// export default SearchForm;\r\n\r\nimport {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './form.scss';\r\n\r\nconst setContent = (process, Component) => { // передаем процесс нужный и данные по персонажу(если нужно)\r\n    // отталкиваемся от процесса и в зависимости от него генерируем разные кусочки интерфейса\r\n    switch (process) {\r\n        case 'waiting':\r\n            return null;\r\n            break;\r\n        case 'loading':\r\n            return null;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component/>; \r\n            break;\r\n        case 'error':\r\n            return <div className=\"char__search-critical-error\"><ErrorMessage /></div>;\r\n            break;\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    //const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = () => {\r\n        return (\r\n            !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {setContent(process, () => results())}\r\n            {/* {results}\r\n            {errorMessage} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchForm from \"../form/Form\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n    console.log('render MAIN');\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                    {/* <div>helo</div> */}\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <SearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => { // http - > так часто называют сущности которуе будут работать с запросами\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // process - какой процесс будет внутри компонента. waiting - ожидание какого-то действия. обозначили текущее состояние\r\n\r\n    // тут будут хуки которые обрабатывают загрузку сервера и ошибки сервера, поэтому логично обращение к серверу тоже вынести сюда\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => { // body null необходимо при get-запросах\r\n        //setLoading(true);\r\n        setProcess('loading'); // загружаем данные с сервера\r\n\r\n        // этот метод будет только отправлять запрос на сервер, но не будет его обрабатывать. Поэтому для обработки ошибок будет следующая конструкция\r\n        try {\r\n            const response = await fetch(url, {method, body, headers}); // await ждет ответ от сервера. В response получаем promise \r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json(); // опять ждем когда сконвертируется\r\n\r\n            // если данные загрузились(код дошел до этого участка)\r\n            //setLoading(false);\r\n            // setProcess('confirmed'); // запрос произведен - будем менять этот стейт в самой функции, т.к. иначе из-за асинхронности и еще не обработанности данных будет ошибка\r\n\r\n            return data; // данные не трансформированные - чистые\r\n        } catch(e) {\r\n            //setLoading(false);\r\n            //setError(e.message); // true\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        //setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {//loading, \r\n            //error, \r\n            request, \r\n            clearError, \r\n            process, \r\n            setProcess};\r\n}","export const _apiKey = 'apikey=272103bc80d57e1c4159f0364fe95129';","import { useHttp } from \"../hooks/http.hook\";\r\nimport { _apiKey } from \"../keys/apiKey\";\r\n\r\nconst useMarvelService = () => { // это тоже кастомный хук для использования сервиса\r\n    const {//loading, \r\n            request, \r\n            //error, \r\n            clearError, \r\n            process, \r\n            setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _baseOffset = 210; // базовый отступ для персонажей(чтобы не с самого первого персонажа(типо там не оч интересные для демонстрации))\r\n    const _baseOffsetComics = 0;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => { // значение для offset по-умолчанию, если туда ничего не передается\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // getResource -> request - то же самое, только тут мы еще работаем с состоянием\r\n        return res.data.results.map(_transformCharacter); // передаем callback-функцию\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetComics) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    \r\n    // Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        // в результате может быть несколько, возьмем значение иначе\r\n        // return _transformCharacter(res.data.results[0]);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        let descr = char.description.length === 0 ? 'Doesn`t have any description yet' : char.description;\r\n        if (descr.length > 210) {\r\n            descr = descr.slice(0, 210) + '...';\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: descr, //char.description,\r\n            fulldescription: char.description.length === 0 ? 'Doesn`t have any description yet' : char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            name: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n\t\t\t\t? `${comic.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : \"not available\",\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    return {//loading, \r\n            //error, \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            clearError,\r\n            getAllComics, \r\n            getComics, \r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => { // передаем процесс нужный и данные по персонажу(если нужно)\r\n    // отталкиваемся от процесса и в зависимости от него генерируем разные кусочки интерфейса\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>; // тут реакт будет пытаться отрендерить компонент с данными, которых еще не существует, они не были обработаны. Т.к. Сначала мы устанавливаем процесс confirmed, и потом передаем данные для обработки в marvelServices(из http.hook.js)\r\n            // решение -> передать функцию по ручному изменению состояния в сам компонент\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","data","name","description","thumbnail","homepage","wiki","isStubImg","indexOf","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charArr","setCharArr","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharsLoaded","newCharArr","ended","length","refsArray","useRef","onCharSelect","itemID","i","onCharSelected","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","renderElements","console","log","items","map","ItemProps","CSSTransition","timeout","classNames","ref","el","tabIndex","onKeyDown","e","key","preventDefault","TransitionGroup","component","disabled","comics","comicsItems","slice","comicId","concat","resourceURI","Link","to","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getCharacterByName","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","SearchForm","decoration","_apiKey","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_transformCharacter","descr","fulldescription","path","extension","urls","_transformComic","comic","_comic$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComics","Skeleton"],"sourceRoot":""}