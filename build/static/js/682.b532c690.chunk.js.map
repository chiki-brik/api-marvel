{"version":3,"file":"static/js/682.b532c690.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","keys/apiKey.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport {Link} from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => { // передаем процесс нужный и данные по персонажу(если нужно)\n    // отталкиваемся от процесса и в зависимости от него генерируем разные кусочки интерфейса\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <Component/>; \n            break;\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicArr, setComicArr] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [comicEnded, setComicEnded] = useState(false);\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => { \n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n\n        getAllComics(offset)\n            .then(onComicsLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsLoaded = (newComicArr) => {\n        let ended = false;\n        if (newComicArr.length < 8) ended = true;\n        setComicArr(comicArr => [...comicArr, ...newComicArr]);\n\n        setnewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicEnded(ended);\n    }\n\n    const renderComics = () => {\n        const items = comicArr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.name} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.name}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            );\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    // const errorMessage = error ?  <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    // const elements = renderComics();\n    //const elements = <div></div>;\n\n    return (\n        <div className=\"comics__list\">\n            {/* {errorMessage}\n            {spinner} */}\n            {setContent(process, () => renderComics(), newItemLoading)}\n            {/* <ul className=\"comics__grid\">\n                {elements}\n            </ul> */}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                    />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => { // http - > так часто называют сущности которуе будут работать с запросами\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // process - какой процесс будет внутри компонента. waiting - ожидание какого-то действия. обозначили текущее состояние\r\n\r\n    // тут будут хуки которые обрабатывают загрузку сервера и ошибки сервера, поэтому логично обращение к серверу тоже вынести сюда\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => { // body null необходимо при get-запросах\r\n        //setLoading(true);\r\n        setProcess('loading'); // загружаем данные с сервера\r\n\r\n        // этот метод будет только отправлять запрос на сервер, но не будет его обрабатывать. Поэтому для обработки ошибок будет следующая конструкция\r\n        try {\r\n            const response = await fetch(url, {method, body, headers}); // await ждет ответ от сервера. В response получаем promise \r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json(); // опять ждем когда сконвертируется\r\n\r\n            // если данные загрузились(код дошел до этого участка)\r\n            //setLoading(false);\r\n            // setProcess('confirmed'); // запрос произведен - будем менять этот стейт в самой функции, т.к. иначе из-за асинхронности и еще не обработанности данных будет ошибка\r\n\r\n            return data; // данные не трансформированные - чистые\r\n        } catch(e) {\r\n            //setLoading(false);\r\n            //setError(e.message); // true\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        //setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {//loading, \r\n            //error, \r\n            request, \r\n            clearError, \r\n            process, \r\n            setProcess};\r\n}","export const _apiKey = 'apikey=272103bc80d57e1c4159f0364fe95129';","import { useHttp } from \"../hooks/http.hook\";\r\nimport { _apiKey } from \"../keys/apiKey\";\r\n\r\nconst useMarvelService = () => { // это тоже кастомный хук для использования сервиса\r\n    const {//loading, \r\n            request, \r\n            //error, \r\n            clearError, \r\n            process, \r\n            setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _baseOffset = 210; // базовый отступ для персонажей(чтобы не с самого первого персонажа(типо там не оч интересные для демонстрации))\r\n    const _baseOffsetComics = 0;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => { // значение для offset по-умолчанию, если туда ничего не передается\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`); // getResource -> request - то же самое, только тут мы еще работаем с состоянием\r\n        return res.data.results.map(_transformCharacter); // передаем callback-функцию\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffsetComics) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    \r\n    // Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        // в результате может быть несколько, возьмем значение иначе\r\n        // return _transformCharacter(res.data.results[0]);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        let descr = char.description.length === 0 ? 'Doesn`t have any description yet' : char.description;\r\n        if (descr.length > 210) {\r\n            descr = descr.slice(0, 210) + '...';\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: descr, //char.description,\r\n            fulldescription: char.description.length === 0 ? 'Doesn`t have any description yet' : char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            name: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n\t\t\t\t? `${comic.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : \"not available\",\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    return {//loading, \r\n            //error, \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            clearError,\r\n            getAllComics, \r\n            getComics, \r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","objectFit","margin","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicArr","setComicArr","useState","offset","setOffset","setnewItemLoading","comicEnded","setComicEnded","loading","error","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsLoaded","newComicArr","ended","length","renderComics","items","map","item","i","Link","to","concat","id","thumbnail","name","price","disabled","onClick","ComicsPage","_Fragment","Helmet","content","_apiKey","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_transformCharacter","char","descr","description","slice","fulldescription","path","extension","homepage","wiki","urls","comics","_transformComic","comic","_comic$textObjects$","title","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","res","getComics","getCharacterByName"],"sourceRoot":""}